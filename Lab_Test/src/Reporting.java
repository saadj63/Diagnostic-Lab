
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import net.proteanit.sql.DbUtils;
import java.io.*;
import java.awt.Desktop;  
import java.awt.HeadlessException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.poi.xwpf.usermodel.XWPFDocument;
import org.apache.poi.xwpf.usermodel.XWPFParagraph;
import org.apache.poi.xwpf.usermodel.XWPFRun;
import org.openxmlformats.schemas.wordprocessingml.x2006.main.CTNumbering;
import org.apache.poi.xwpf.usermodel.*;
import java.util.List;
import java.lang.reflect.Field;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.sql.Timestamp;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import org.apache.poi.xwpf.usermodel.XWPFTable;
import org.apache.poi.xwpf.usermodel.XWPFTableRow;
import static org.openxmlformats.schemas.wordprocessingml.x2006.main.STAlgClass.Enum.table;


/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Saad_BAD
 */
public class Reporting extends javax.swing.JFrame {
     String n;
       File file=new File("D:\\Reports\\"+n+".docx");
  String a=file.getPath();
       
  
  
  
  
  
  

  
  
  
  /**
     *
     * Creates new form Reporting
     */
    public Reporting() {
        initComponents();
  
      
    
        
        String q;
        
                    String Username="root";
        String password="root123";
                   q = "Select Date,Patients_Name,Age,City,Gender,Contact_No,Refered_By,Type_of_Test,Ultrasonography_Test,RadioGraphy_Test,Price,Report from patient where Date = ?";
    // String q1="select Report,Report1,Report2,Report3,Report4,Report5,Report6,Report7,Report8,Report9,Report10 from patient";
                   String url = "jdbc:mysql://localhost:3306/lab";
          try{
              Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement pst=con.prepareStatement(q);
     //   PreparedStatement st1=con.prepareStatement(q1);
       // ResultSet rst=st1.executeQuery();
      //  t.setModel(DbUtils.resultSetToTableModel(rst));
     Date date=new Date();

String dateStr2=new Timestamp(date.getTime()).toString();
t1.setText(dateStr2.substring(0,10));
pst.setString(1,t1.getText());
   
       
             ResultSet rs= pst.executeQuery();
       t.setModel(DbUtils.resultSetToTableModel(rs));
       
          }catch(   ClassNotFoundException | SQLException e){
          
          System.out.println(e);

               }        // TODO add your handling code here:
 
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        vw = new javax.swing.JFrame();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        view = new javax.swing.JTable();
        f1 = new javax.swing.JFrame();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        cb2 = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        t1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        vw.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        vw.setTitle("Report List");
        vw.setMinimumSize(new java.awt.Dimension(1366, 700));
        vw.setType(java.awt.Window.Type.POPUP);

        jLabel7.setText("List of Patients Report");

        view.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        view.setMinimumSize(new java.awt.Dimension(1366, 700));
        view.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(view);

        javax.swing.GroupLayout vwLayout = new javax.swing.GroupLayout(vw.getContentPane());
        vw.getContentPane().setLayout(vwLayout);
        vwLayout.setHorizontalGroup(
            vwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vwLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, vwLayout.createSequentialGroup()
                .addContainerGap(662, Short.MAX_VALUE)
                .addComponent(jLabel7)
                .addGap(597, 597, 597))
        );
        vwLayout.setVerticalGroup(
            vwLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(vwLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel7)
                .addGap(12, 12, 12)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 663, Short.MAX_VALUE))
        );

        f1.setTitle("Create Reports");
        f1.setMinimumSize(new java.awt.Dimension(386, 332));
        f1.setResizable(false);

        jButton6.setText("Add New Report");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("View Reports");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        cb2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "ADPKD", "Anomaly", "ANOMALY WITH FETAL ECHO", "Breast - fibroadenosis", "Complete abortion", "CAROTID DOPPLER ", "CRANIAM", "CXR and erect abdo", "EARLY  obs", "BLIGHTED OVUM", "Early obs 1", "Early obs with no cardiac activity", "EARLY TWIN PREGNANCY", "ECTOPIC PREG", "FEMALE NORMAL", "FEMALE PELVIS", "FETAL ECHO ", "FETAL POLE  NOT SEEN, ONLY GSAC AND YOLK SAC SEEN", "FOLLICULAR MONITORING ", "FORMAT", "gynecomastia", "HASHIMOTO'S THYROIDITIS", "Incomplete abortion", "IUD", "KNEE SWELLING PP", "KUB", "left orbit", "LOWER LIMB AV-DOPPLER", "MALE NORMAL - Copy", "MARGINAL PLACENTA PREVIA", "Missed abortion", "NECK", "No congenital anomalies", "NO INTRA OR EXTRA OBS", "NORMAL BREAST - Copy", "NORMAL UPPER LIMB DOPPLER", "NT SCAN - Copy", "OBS 15-16 Weeks", "OBS 28 - Copy", "OBS 30 - Copy", "OBS DOPPLER - Copy", "OBS-ADVANCED GESTATIONAL AGE", "ONLY G sac", "perianal format", "RAYNAUDS PHENOMENON", "RENAL DOPPLER", "ROUTINE MONOCHORIONIC DIAMNIOTIC - 30 WEEKS", "rpoc", "SCROTUM", "TAO DOPPLER", "thyroiditis", "TWIN ANOMALY WITH FETAL ECHO - MONOCHORIONIC DIAMNIOTIC", "TWIN ANOMALY", "TWIN NT SCAN", "TWIN PREGNANCY - DOPPLER", "USG ANKLE", "USG CHEST", "USG SWELLING", "VERY EARLY OBS", "ABDOMEN_X-RAY", "ANKLE X-RAY", "ARM X-RAY", "CALCANEUM X-RAY", "chest xray normal", "C-SPINE X-RAY", "Degenerative spine X-RAY", "ELBOW X-RAY", "Foot X-RAY", "Hand X-RAY", "HSG", "KNEE.", "LEFT SHOULDER", "LS SPINE", "NASOPHARYNX NORMAL", "NASOPHARYNX", "pbh", "PNS1", "SHOULDER(1)", "THIGH", "WRIST" }));
        cb2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb2ActionPerformed(evt);
            }
        });

        jLabel6.setText("Select Format");

        javax.swing.GroupLayout f1Layout = new javax.swing.GroupLayout(f1.getContentPane());
        f1.getContentPane().setLayout(f1Layout);
        f1Layout.setHorizontalGroup(
            f1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, f1Layout.createSequentialGroup()
                .addContainerGap(45, Short.MAX_VALUE)
                .addGroup(f1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(f1Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addGap(86, 86, 86)
                        .addComponent(jButton7))
                    .addGroup(f1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cb2, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49))
        );
        f1Layout.setVerticalGroup(
            f1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, f1Layout.createSequentialGroup()
                .addContainerGap(129, Short.MAX_VALUE)
                .addGroup(f1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cb2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addGap(66, 66, 66)
                .addGroup(f1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton7)
                    .addComponent(jButton6))
                .addGap(94, 94, 94))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Pending Report List");
        setBackground(new java.awt.Color(27, 15, 32));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel2.setBackground(new java.awt.Color(27, 15, 32));
        jPanel2.setMinimumSize(new java.awt.Dimension(1366, 700));
        jPanel2.setPreferredSize(new java.awt.Dimension(1366, 700));

        jButton2.setText("Home");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        t.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        t.setEditingColumn(11);
        t.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        t.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tMousePressed(evt);
            }
        });
        jScrollPane1.setViewportView(t);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 255, 153));
        jLabel2.setText("Pending Reports List");

        jLabel1.setFont(new java.awt.Font("Microsoft Sans Serif", 1, 48)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Add Reports");

        jButton3.setText("Refresh");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Date");

        jButton1.setText("Search");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(165, 165, 165)
                .addComponent(jLabel2)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(565, Short.MAX_VALUE)
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(186, 186, 186)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(455, 455, 455))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addComponent(jLabel3)
                .addGap(40, 40, 40)
                .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(499, 499, 499))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jButton1))
                        .addGap(25, 25, 25)))
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(149, 149, 149)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3))
                .addGap(123, 123, 123))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -10, -1, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

Home_Page hp=new Home_Page();
hp.setVisible(true);
this.dispose();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void tMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tMouseClicked

        f1.setVisible(true);
        /*
 DefaultTableModel model = (DefaultTableModel)t.getModel();

        // get the selected row index
      
           int selectedRowIndex = t.getSelectedRow();
       
        // set the selected row data into jtextfields
       n=model.getValueAt(selectedRowIndex, 2).toString();  
      System.out.println(n);
      
      */ 
       
       
       
      // jTextFieldFN.setText(model.getValueAt(selectedRowIndex, 1).toString());
      // jTextFieldLN.setText(model.getValueAt(selectedRowIndex, 2).toString());
      // jTextFieldAGE.setText(model.getValueAt(selectedRowIndex, 3).toString());


        // TODO add your handling code here:
    }//GEN-LAST:event_tMouseClicked

    private void tMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tMousePressed





// TODO add your handling code here:
    }//GEN-LAST:event_tMousePressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
  
        String q;
        
                    String Username="root";
        String password="root123";
        q = "Select Date,Patients_Name,Age,City,Gender,Contact_No,Refered_By,Type_of_Test,Ultrasonography_Test,RadioGraphy_Test,Price,Report from patient where Date = ?";
      String url = "jdbc:mysql://localhost:3306/lab";
          try{
              Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement pst=con.prepareStatement(q);
           
     Date date=new Date();

String dateStr2=new Timestamp(date.getTime()).toString();

pst.setString(1,dateStr2.substring(0,10));
   
       
             ResultSet rs= pst.executeQuery();
       t.setModel(DbUtils.resultSetToTableModel(rs));
       
          }catch(   ClassNotFoundException | SQLException e){
          
          System.out.println(e);

               }          // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

  
            DefaultTableModel model = (DefaultTableModel)t.getModel();

        // get the selected row index
      
           int selectedRowIndex = t.getSelectedRow();
       
        // set the selected row data into jtextfields
       n=model.getValueAt(selectedRowIndex, 1).toString();
  String n2;
  String n1;
  if (model.getValueAt(selectedRowIndex,8).toString()==null){ 
  n2=model.getValueAt(selectedRowIndex,8).toString();
  
  n1=n+n2;
  }else
     n2= model.getValueAt(selectedRowIndex,9).toString();
n1=n+n2;
       
          
  System.out.println(n1);
   
        File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
          String Username="root";
        String password="root123";
        String q = "update patient set Report='"+a+"' where Patients_Name='"+n+"'" ;
        String url = "jdbc:mysql://localhost:3306/lab";
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement pst=con.prepareStatement(q);
        
         
    
            
         boolean rs=pst.execute();
   if((rs==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
                System.out.println("not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }

        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        /*
        DefaultTableModel model = (DefaultTableModel)t.getModel();

        // get the selected row index
      
           int selectedRowIndex = t.getSelectedRow();
       
        // set the selected row data into jtextfields
       n=model.getValueAt(selectedRowIndex, 1).toString();
  String n2;
  String n1;
  n2="";
 n1=n+n2;  
       
          
  System.out.println(n1);
   
  
  
String url = "jdbc:mysql://localhost:3306/lab";
       String Username="root";
       String password="root123";
  /*     String t="select Report from patient where Patients_Name='"+n+"'";
       String t1="select Report1 from patient where Patients_Name='"+n+"'";
       String t2="select Report2 from patient where Patients_Name='"+n+"'";
       String t3="select Report3 from patient where Patients_Name='"+n+"'";
       String t4="select Report4 from patient where Patients_Name='"+n+"'";
       String t5="select Report5 from patient where Patients_Name='"+n+"'";
       String t6="select Report6 from patient where Patients_Name='"+n+"'";
       String t7="select Report7 from patient where Patients_Name='"+n+"'";
       String t8="select Report8 from patient where Patients_Name='"+n+"'";
       String t9="select Report9 from patient where Patients_Name='"+n+"'";
       String t10="select Report10 from patient where Patients_Name='"+n+"'";
      */ 
//   n=model.getValueAt(selectedRowIndex, 1).toString();  
//              C//lass.forName("com.mysql.cj.jdbc.Driver");
       /* Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement pst=con.prepareStatement(t);
      PreparedStatement pst2=con.prepareStatement(t1);
      PreparedStatement pst3=con.prepareStatement(t2);
      PreparedStatement pst4=con.prepareStatement(t3);
      PreparedStatement pst5=con.prepareStatement(t4);
      PreparedStatement pst6=con.prepareStatement(t5);
      PreparedStatement pst7=con.prepareStatement(t6);
      PreparedStatement pst8=con.prepareStatement(t7);
      PreparedStatement pst9=con.prepareStatement(t8);
      PreparedStatement pst10=con.prepareStatement(t9);
      PreparedStatement pst11=con.prepareStatement(t10);
        ResultSet rs= pst.executeQuery();
        ResultSet rs2= pst2.executeQuery();
        ResultSet rs3= pst3.executeQuery();
        ResultSet rs4= pst4.executeQuery();
        ResultSet rs5= pst5.executeQuery();
        ResultSet rs6= pst6.executeQuery();
        ResultSet rs7= pst7.executeQuery();
        ResultSet rs8= pst8.executeQuery();
        ResultSet rs9= pst9.executeQuery();
        ResultSet rs10= pst10.executeQuery();
        ResultSet rs11= pst11.executeQuery();
        
        
        boolean b=rs.next();
        boolean b2=rs2.next();
        boolean b3=rs3.next();
        boolean b4=rs4.next();
        boolean b5=rs5.next();
        boolean b6=rs6.next();
        boolean b7=rs7.next();
        boolean b8=rs8.next();
        boolean b9=rs9.next();
        boolean b10=rs10.next();
        boolean b11=rs11.next();
  
        
        
        
String ab = rs.getString("Report");
String ab2 = rs2.getString("Report1");
String ab3 = rs3.getString("Report2");
String ab4 = rs4.getString("Report3");
String ab5 = rs5.getString("Report4");
String ab6 = rs6.getString("Report5");
String ab7 = rs7.getString("Report6");
String ab8 = rs8.getString("Report7");
String ab9 = rs9.getString("Report8");
String ab10 = rs10.getString("Report9");
String ab11 = rs11.getString("Report10");
  
          if (ab==null)
         
          {
           File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
                System.out.println("not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }
  
/*          
          }
          else if(ab2==null)
          {
                     File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report1='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
                System.out.println("not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }   
          }
          else if(ab3==null)
          {
                     File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report2='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
                System.out.println("not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }   
          }
          else if (ab4==null)
          {
                     File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report3='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
               JOptionPane.showMessageDialog(null,"Desktop is not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }   
          }
           
          else if (ab5==null)
          {
          
                         File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report4='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
               JOptionPane.showMessageDialog(null,"Desktop is not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        } 
              
          }
           
          else if (ab6==null)
          {
                       File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report5='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
               JOptionPane.showMessageDialog(null,"Desktop is not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }   
          }
           
          else if (ab7==null)
          {
                       File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report6='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
               JOptionPane.showMessageDialog(null,"Desktop is not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }   
          }
           
          else if (ab8==null)
          {
                      File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report7='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
               JOptionPane.showMessageDialog(null,"Desktop is not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }    
          }
           
          else if (ab9==null)
          {
                       File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report8='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
               JOptionPane.showMessageDialog(null,"Desktop is not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }   
          }
           
          else if (ab10==null)
          {
                     File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report9='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
               JOptionPane.showMessageDialog(null,"Desktop is not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        }     
          }
           
          else if (ab11==null)
          {
                         File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
  System.out.println(a);
        
        FileOutputStream out = null;
        try {
          String name=  cb2.getSelectedItem().toString();
            XWPFDocument docx1 = new XWPFDocument(new  FileInputStream("D:\\Report Format\\"+name+".docx"));
            XWPFNumbering numberingDocx1 = docx1.getNumbering();
            
// get paragraphListDocx1 as a List of all paragraphs from docx1
            List<XWPFParagraph> paragraphListDocx1 =  docx1.getParagraphs();
            // get the numbering.xml from docx1 to docx2
            // this is needed if some of the paragraphs from docx1 are numbered
            XWPFDocument docx2= new XWPFDocument();
            
out = new FileOutputStream(new File("D:\\Reports\\"+n1+".docx"));
XWPFParagraph p1 = docx2.createParagraph();
XWPFRun run = p1.createRun();
run.setBold(true);
run.setText("Date:- "+model.getValueAt(selectedRowIndex, 0).toString()+"     \n");
run.setBold(true);
run.setText("Name:- "+model.getValueAt(selectedRowIndex, 1).toString()+"      ");
run.setBold(true);
run.setText("Age:- "+model.getValueAt(selectedRowIndex, 2).toString()+"       ");
run.setBold(true);
run.setText("Gender:- "+model.getValueAt(selectedRowIndex, 4).toString()+"      ");
run.setBold(true);
run.setText("Referred By:- "+model.getValueAt(selectedRowIndex, 6).toString()+"  ");

if (numberingDocx1 != null) {
                XWPFNumbering numberingDocx2 = docx2.createNumbering();
                try {
                    Field f = numberingDocx1.getClass().getDeclaredField("ctNumbering");
                    f.setAccessible(true);
                    numberingDocx2.setNumbering((CTNumbering)f.get(numberingDocx1));
                } catch (NoSuchFieldException | IllegalAccessException nsfex) {
                }
            }         // create a paragraph in docx2
            XWPFParagraph paragraphDocx2 = docx2.createParagraph();
//XWPFRun run = paragraphDocx2.createRun();



          // this will copy all paragraphs from paragraphListDocx1 to docx2
            for (XWPFParagraph paragraphDocx1 : paragraphListDocx1) {
                paragraphDocx2 = docx2.createParagraph();
                docx2.setParagraph(paragraphDocx1, docx2.getPosOfParagraph(paragraphDocx2));
            }         paragraphDocx2 = docx2.createParagraph();
            run = paragraphDocx2.createRun();
                      
 
            docx2.write(out);
            //docx2.close();   
            System.out.println(n+" written successfully");
        try
        {
          String p=file.getAbsolutePath();
      System.out.println(p);
        String q = "update patient set Report10='"+a+"' where Patients_Name='"+n+"'" ;
                 n=model.getValueAt(selectedRowIndex, 1).toString();  
              Class.forName("com.mysql.cj.jdbc.Driver");
       // Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement st=con.prepareStatement(q);
        
         
    
            
         boolean rs1=st.execute();
   if((rs1==false))
           {
       JOptionPane.showMessageDialog(null,"File Saved");
       
            
   }
   else
   {
       JOptionPane.showMessageDialog(null,"File Not Saved");
   } 
     
        }catch(HeadlessException | ClassNotFoundException | SQLException e)
                {
                    JOptionPane.showMessageDialog(null,e);
                }
                   if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
               JOptionPane.showMessageDialog(null,"Desktop is not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {//checks file exists or not
                desktop.open(file);              //opens the specified file
            }
        } catch(IOException e)
        {
        }  
 finally {
            try {
                out.close();
            } catch (IOException ex) {
                Logger.getLogger(Reporting.class.getName()).log(Level.SEVERE, null, ex);
            }
     
        } 
          }
           
  }catch(HeadlessException | ClassNotFoundException | IllegalArgumentException | SecurityException | SQLException e)
  {
      JOptionPane.showMessageDialog(null, e);
  }
         // TODO add your handling code here:
*/
    
        
        
        
        
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
                    
          
                
                
                
                
                
                


  
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
                
          

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void cb2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cb2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

                DefaultTableModel model = (DefaultTableModel)t.getModel();

      
        
// get the selected row index
      
           int selectedRowIndex = t.getSelectedRow();
//   c.setText(Integer.toString(rowscount));       
        // set the selected row data into jtextfields
       n=model.getValueAt(selectedRowIndex, 1).toString();
  String n2;
  String n1;
  if (model.getValueAt(selectedRowIndex,8).toString()==null){ 
  n2=model.getValueAt(selectedRowIndex,8).toString();
  
  n1=n+n2;
  }else
     n2= model.getValueAt(selectedRowIndex,9).toString();
n1=n+n2;
   
        File file=new File("D://Reports//"+n1+".docx");
  String a="D://Reports//"+n1+".docx";
        
        
        
        
        if(!Desktop.isDesktopSupported())//check if Desktop is supported by Platform or not
            {
                System.out.println("not supported");
                return;
            }
                  
            Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {try {
                //checks file exists or not
                desktop.open(file);              //opens the specified file
            } catch (IOException ex) {
                Logger.getLogger(Search_Patient.class.getName()).log(Level.SEVERE, null, ex);
            }
            }



        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        /*
        DefaultTableModel model = (DefaultTableModel)t.getModel();

        // get the selected row index
      
           int selectedRowIndex = t.getSelectedRow();
       
        // set the selected row data into jtextfields
       n=model.getValueAt(selectedRowIndex, 1).toString();
  
        
                    String Username="root";
        String password="root123";
                 //  q = "Select Date,Patients_Name,Age,City,Gender,Contact_No,Refered_By,Type_of_Test,Ultrasonography_Test,RadioGraphy_Test,Price,Report from patient where Date = ?";
     String q1="select Patients_Name,Report,Report1,Report2,Report3,Report4,Report5,Report6,Report7,Report8,Report9,Report10 from patient where Patients_Name='"+n+"'";
                   String url = "jdbc:mysql://localhost:3306/lab";
          try{
              Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con=DriverManager.getConnection(url,Username,password);
       // PreparedStatement pst=con.prepareStatement(q);
        PreparedStatement st1=con.prepareStatement(q1);
        ResultSet rst=st1.executeQuery();
        view.setModel(DbUtils.resultSetToTableModel(rst));
        vw.setVisible(true);
          }catch(Exception e)
                {
                JOptionPane.showMessageDialog(null,e);
                }
                 
*/




        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void viewMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewMouseClicked


int row=view.getSelectedRow();
int col=view.getSelectedColumn();
String file_name=view.getValueAt(row, col).toString();
File file=new File(file_name);
 Desktop desktop = Desktop.getDesktop();
            if(file.exists())
            {try {
                //checks file exists or not
                desktop.open(file);              //opens the specified file
    } catch (IOException ex) {
        Logger.getLogger(Search_Patient.class.getName()).log(Level.SEVERE, null, ex);
    }
            }
        // TODO add your handling code here:
    }//GEN-LAST:event_viewMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

      
    
        
        String q;
        
                    String Username="root";
        String password="root123";
                   q = "Select Date,Patients_Name,Age,City,Gender,Contact_No,Refered_By,Type_of_Test,Ultrasonography_Test,RadioGraphy_Test,Price,Report from patient where Date = ?";
    // String q1="select Report,Report1,Report2,Report3,Report4,Report5,Report6,Report7,Report8,Report9,Report10 from patient";
                   String url = "jdbc:mysql://localhost:3306/lab";
          try{
              Class.forName("com.mysql.cj.jdbc.Driver");
        Connection con=DriverManager.getConnection(url,Username,password);
        PreparedStatement pst=con.prepareStatement(q);
     //   PreparedStatement st1=con.prepareStatement(q1);
       // ResultSet rst=st1.executeQuery();
//t1.setText(dateStr2.substring(0,10));
pst.setString(1,t1.getText());
   
       
             ResultSet rs= pst.executeQuery();
       t.setModel(DbUtils.resultSetToTableModel(rs));
       
          }catch(   ClassNotFoundException | SQLException e){
          
          System.out.println(e);

               }        // TODO add your handling code here:
         // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Reporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Reporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Reporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Reporting.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Reporting().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cb2;
    private javax.swing.JFrame f1;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable t;
    private javax.swing.JTextField t1;
    private javax.swing.JTable view;
    public javax.swing.JFrame vw;
    // End of variables declaration//GEN-END:variables
}
